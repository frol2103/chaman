openapi: 3.0.1
info:
  title: Chaman
  description: ""
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://chaman.frol.be/api
  - url: http://chaman.frol.be/api
tags:
  - name: field
    description: Field information
  - name: item
    description: complete item form
paths:

  /field:
    get:
      tags:
        - field
      summary: Get a field
      operationId: getField
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
    post:
      tags:
        - field
      summary: create a field
      operationId: createField
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldConfig'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'

  /field/{uuid}:
    get:
      tags:
        - field
      summary: get a field config
      operationId: getFieldConfig
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldConfig'
    put:
      tags:
        - field
      summary: update a field
      operationId: updateField
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldConfig'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
    delete:
      tags:
        - field
      summary: delete a field
      operationId: deleteField
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content: { }


  /field/{uuid}/tag:
    get:
      tags:
        - tag
      summary: get tag list for a field
      operationId: getAllTags
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    put:
      tags:
        - tag
      summary: add tag for a field
      operationId: addTag
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: value
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK

  /data-types/:
    get:
      tags:
        - datatypes
      summary: get data type
      operationId: getDataTypes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldConfig'
  /item:
    get:
      tags:
        - item
      summary: Get all items
      operationId: getItems
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDescr'
    post:
      tags:
        - item
      summary: create an item
      operationId: createItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /item/{uuid}:
    get:
      tags:
        - item
      summary: get a item
      operationId: getItem
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    put:
      tags:
        - item
      summary: update a item
      operationId: updateItem
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

    delete:
      tags:
        - item
      summary: delete a item
      operationId: deleteItem
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content: { }


  /item/{uuid}/annex:
    post:
      tags:
        - "annex"
      summary: "upload a file"
      operationId: "uploadFile"
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Annex"

  /annex/{uuid}:
    delete:
      tags:
        - "annex"
      summary: "delete an annex"
      operationId: "deleteAnnex"
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"

  /annex/{uuid}/file:
    get:
      tags:
        - "File"
      summary: "get a file"
      operationId: "getAnnexFile"
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"

  /item/{uuid}/field/{uuidField}:
    put:
      tags:
        - item
      summary: update an item field
      operationId: updateItemField
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: uuidField
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'

    delete:
      tags:
        - item
      summary: delete an item field
      operationId: deleteItemField
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: uuidField
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content: { }


  /item/{uuid}/thumbnail/file:
    get:
      tags:
        - "File"
      summary: "get a thumbnail file"
      operationId: "getThumbnailFile"
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"

  /item/{uuid}/thumbnail:
    get:
      tags:
        - "Thumbnail"
      summary: "get thumbnail description"
      operationId: "getDescription"
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Thumbnail"

    put:
      tags:
        - "Thumbnail"
      summary: "set thumbnail description"
      operationId: "setDescription"
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/Thumbnail"
              required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Thumbnail"

  /event:
    put:
      tags:
        - "Event"
      summary:  "add an event"
      operationId: "addEvent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/Event"
              required: true
      responses:
        200:
          description: "Ok"

  /item/{uuid}/link:
    post:
      tags:
        - "link"
      summary: "add a link"
      operationId: "addLink"
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: linkedUuid
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Link"

  /link/{uuid}:
    delete:
      tags:
        - "link"
      summary: "delete a link"
      operationId: "deleteLink"
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"

components:
  schemas:
    FieldType:
      required:
        - identifier
      type: object
      properties:
        identifier:
          type: string

    Field:
      type: object
      properties:
        uuid:
          type: string
          description: single uuid acrross all version of the field
        label:
          type: string
        reference:
          type: string
        inputType:
          type: string
        value:
          type: array
          items:
            $ref: '#/components/schemas/FieldValue'
        params: { }
        errorMessages:
          type: array
          items:
            type: string

    FieldConfig:
      type: object
      properties:
        label:
          type: string
        reference:
          type: string
        datatype:
          type: string
        config:
          type: array
          items:
            $ref: '#/components/schemas/Field'


    FieldValue:
      type: object
      properties:
        uuid:
          type: string
          description: identifier of the value
        value: { }
    ItemDescr:
      type: object
      properties:
        uuid:
          type: string
        title:
          type: string
        description:
          type: string
    Item:
      type: object
      properties:
        uuid:
          type: string
        title:
          type: string
        description:
          type: string
        content:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        annexes:
          type: array
          items:
            $ref: '#/components/schemas/Annex'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    Annex:
      type: object
      properties:
        uuid:
          type: string
        filename:
          type: string
        mime:
          type: string

    Thumbnail:
      type: object
      properties:
        annexUuid:
          type: string
        x:
          type: number
        y:
          type: number
        width:
          type: number

    Event:
      type: object
      properties:
        eventType:
          type: string
          enum:
            - TakePicture
            - TakeThumbnail
        itemId:
          type: string
        content:
          type: string

    Link:
      type: object
      properties:
        uuid:
          type: string
        item:
          $ref: '#/components/schemas/ItemDescr'
